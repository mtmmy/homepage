using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Leetcode.Utils;

namespace Leetcode.Solutions {
    public class AddTwoNumbers {
        public ListNode AddTwoNumbersSolution(ListNode l1, ListNode l2) {
            var result = new ListNode(-1);
            var count = result;
            double carry = 0;

            while (l1 != null || l2 != null || carry > 0) {

                int value = (l1 != null && l1.val > 0 ? l1.val : 0) + (l2 != null && l2.val > 0 ? l2.val : 0) + (int)carry;
                carry = value / 10;
                carry = Math.Floor(carry);
                value = value % 10;

                count.next = new ListNode(value);
                count = count.next;

                l1 = l1 == null ? null : l1.next;
                l2 = l2 == null ? null : l2.next;
            }
            return result.next;
        }
    }
}
//======
/* 
    //======
    #2 Add Two Numbers
    //======
    You are given two non-empty linked lists representing two non-negative integers. 
    The digits are stored in reverse order and each of their nodes contain a single digit. 
    Add the two numbers and return it as a linked list.
    You may assume the two numbers do not contain any leading zero, except the number 0 itself.
    //======
    blah blah blah blah blah blah blah blah blah blah 
    //======
    tag2, tag3, tag4, jkl, mno, pq, rst
    //======
    05/21/2018
    //======
    category1
    //======
 */